<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sass Blog</title>
  <id>https://sass-lang.com/blog</id>
  <link href="https://sass-lang.com/blog"/>
  <link href="https://sass-lang.com/feed.xml" rel="self"/>
  <updated>2022-12-10T00:00:00+00:00</updated>
  <entry>
    <title>Security Alert: Tar Permissions</title>
    <link href="https://sass-lang.com/blog/security-alert-tar-permissions" rel="alternate"/>
    <id>https://sass-lang.com/blog/security-alert-tar-permissions</id>
    <published>2022-12-10T00:00:00+00:00</published>
    <updated>2023-03-10T23:48:42+00:00</updated>
    <author>
      <name>Natalie Weizenbaum</name>
    </author>
    <content type="html">&lt;p&gt;The Sass team was recently alerted by prolific external contributor &lt;a href="https://github.com/ntkme"&gt;@ntkme&lt;/a&gt; to
a security issue in our release process.&lt;/p&gt;

&lt;h2 id="tl-dr"&gt;
&lt;a class="anchor" href="#tl-dr"&gt;&lt;span class="visuallyhidden"&gt;TL;DR permalink&lt;/span&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re using Linux or Mac OS, run &lt;code&gt;ls -ax path/to/sass&lt;/code&gt;. If the last group of
letters in the first column contains &lt;code&gt;w&lt;/code&gt;, you&amp;rsquo;re vulnerable:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Vulnerable:
-rwxr-xrwx 1 nweiz primarygroup 407 Dec 13 12:33 sass-1.56.2/sass

Not vulnerable:
-rwxr-xr-x 1 nweiz primarygroup 407 Dec 13 12:33 sass-1.56.2/sass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re using the &lt;code&gt;sass-embedded&lt;/code&gt; package, do the same thing for
&lt;code&gt;node_modules/sass-embedded/dist/lib/src/vendor/dart-sass-embedded/dart-sass-embedded&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="whos-affected"&gt;
&lt;a class="anchor" href="#whos-affected"&gt;&lt;span class="visuallyhidden"&gt;Who’s Affected? permalink&lt;/span&gt;&lt;/a&gt;Who’s Affected?&lt;/h2&gt;

&lt;p&gt;While we don&amp;rsquo;t expect this issue to be a problem for the vast majority of users,
it does affect the following groups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Users who downloaded the stand-alone Dart Sass, Dart Sass Embedded, or Sass
Migrator &lt;code&gt;.tar.gz&lt;/code&gt; archives from the Dart Sass website and extracted them as
the Unix root user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Users who installed the &lt;code&gt;sass-embedded&lt;/code&gt; npm package as the Unix root user
prior to version 1.54.5.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Users who installed the &amp;ldquo;non-native&amp;rdquo; version of the community-maintained
&lt;code&gt;sass-embedded&lt;/code&gt; RubyGems package as the Unix root user prior to version
1.56.2.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Users on multi-user systems who downloaded the stand-alone Dart Sass, Dart
Sass Embedded, or Sass Migrator &lt;code&gt;.tar.gz&lt;/code&gt; archives from the Dart Sass website
and explicitly passed the &lt;code&gt;-p&lt;/code&gt;/&lt;code&gt;--preserve-permissions&lt;/code&gt; flag when extracting
them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Users who installed Dart Sass via the &lt;code&gt;sass&lt;/code&gt; npm package, Homebrew, or
Chocolatey are categorically not at risk, nor are users on Windows.&lt;/p&gt;

&lt;p&gt;We strongly recommend that users in these vulnerable groups delete and
re-install Sass. All the &lt;code&gt;.tar.gz&lt;/code&gt; files on GitHub have been scrubbed to remove
the vulnerability, so you can reinstall the same version you were previously
using without needing to upgrade to the latest version.&lt;/p&gt;

&lt;p&gt;This is a privilege-escalation issue, which means it could allow a hypothetical
attacker with access to a low-privilege account on your computer to escalate
their access to your account&amp;rsquo;s privileges. However, this also means that it&amp;rsquo;s
not a risk &lt;em&gt;unless&lt;/em&gt; an attacker already has access to an account on your
machine.&lt;/p&gt;

&lt;h2 id="what-went-wrong"&gt;
&lt;a class="anchor" href="#what-went-wrong"&gt;&lt;span class="visuallyhidden"&gt;What went wrong? permalink&lt;/span&gt;&lt;/a&gt;What went wrong?&lt;/h2&gt;

&lt;p&gt;We were inadvertently uploading &lt;code&gt;.tar.gz&lt;/code&gt; archives with permissions metadata
indicating that executable files could be overwritten by all users, not just the
owner.&lt;/p&gt;

&lt;p&gt;In most cases, this metadata is ignored when extracting the archives and the
permissions are set to only be writable by the user doing the extraction.
However, when extracting archives as the Unix root user or explicitly passing
the &lt;code&gt;-p&lt;/code&gt;/&lt;code&gt;--preserve-permissions&lt;/code&gt; flag, the permissions for the extracted files
are set according to the archive&amp;rsquo;s metadata. Because the metadata was incorrect,
an attacker with access to a low-privilege account would be able to overwrite
the executable file and escalate their privileges once it&amp;rsquo;s executed.&lt;/p&gt;

&lt;h2 id="how-did-this-happen"&gt;
&lt;a class="anchor" href="#how-did-this-happen"&gt;&lt;span class="visuallyhidden"&gt;How did this happen? permalink&lt;/span&gt;&lt;/a&gt;How did this happen?&lt;/h2&gt;

&lt;p&gt;Dart Sass is automatically deployed to various different release platforms using
a Dart package called &lt;a href="https://pub.dev/packages/cli_pkg"&gt;&lt;code&gt;cli_pkg&lt;/code&gt;&lt;/a&gt;, which is also written maintained by the Sass
team. This package uses the Dart &lt;a href="https://pub.dev/packages/archive"&gt;&lt;code&gt;archive&lt;/code&gt;&lt;/a&gt; package to generate &lt;code&gt;.tar.gz&lt;/code&gt; files
for stand-alone release packages which are then uploaded to GitHub, and when
initially writing the code to use this package I wrote the following function:&lt;/p&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;ArchiveFile&lt;/span&gt; &lt;span class="nf"&gt;fileFromBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;ArchiveFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;executable&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;495&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;428&lt;/span&gt;
      &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="na"&gt;lastModTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;millisecondsSinceEpoch&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My intention was to set the executable mode to &lt;code&gt;755&lt;/code&gt; (read/write/execute for the
owner, read/execute only for the other users) and the non-executable mode to
&lt;code&gt;644&lt;/code&gt; (read/write for the owner, read-only for other users). However, Dart
doesn&amp;rsquo;t support literal octal numbers and I must have done the decimal-to-octal
conversion wrong. The actual permissions that got set were &lt;code&gt;757&lt;/code&gt;
(read/write/execute for the owner &lt;strong&gt;and other users&lt;/strong&gt;, read/execute for the
group) and &lt;code&gt;654&lt;/code&gt; (read/write for the owner, read/execute for the group, and
read-only for other users).&lt;/p&gt;

&lt;p&gt;This went unnoticed for several years, until @ntkme notified us of the issue
last week and provided a fix to &lt;code&gt;cli_pkg&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="whats-been-done"&gt;
&lt;a class="anchor" href="#whats-been-done"&gt;&lt;span class="visuallyhidden"&gt;What’s been done? permalink&lt;/span&gt;&lt;/a&gt;What’s been done?&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve released &lt;code&gt;cli_pkg&lt;/code&gt; 2.1.7 which sets the archive permissions correctly. In
addition, we&amp;rsquo;ve updated all &lt;code&gt;.tar.gz&lt;/code&gt; files in the Dart Sass, Dart Sass
Embedded, and Sass Migrator repositories to correctly limit write permissions to
only the owner of the files. We&amp;rsquo;re announcing the vulnerability here and on the
&lt;a href="https://twitter.com/SassCSS"&gt;@SassCSS Twitter account&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Request for Comments: Color Spaces</title>
    <link href="https://sass-lang.com/blog/request-for-comments-color-spaces" rel="alternate"/>
    <id>https://sass-lang.com/blog/request-for-comments-color-spaces</id>
    <published>2022-09-21T21:00:00+00:00</published>
    <updated>2023-03-10T23:48:42+00:00</updated>
    <author>
      <name>Miriam Suzanne and Natalie Weizenbaum</name>
    </author>
    <content type="html">&lt;p&gt;There&amp;rsquo;s been a lot of exciting work in the CSS color specifications lately, and
as it begins to land in browsers we&amp;rsquo;ve been preparing to add support for it in
Sass as well. The first and largest part of that is adding support for &lt;em&gt;color
spaces&lt;/em&gt; to Sass, which represents a huge (but largely backwards-compatible)
rethinking of the way colors work.&lt;/p&gt;

&lt;p&gt;Historically, all colors in CSS have existed in the same color space, known as
&amp;ldquo;sRGB&amp;rdquo;. Whether you represent them as a hex code, an &lt;code&gt;hsl()&lt;/code&gt; function, or a
color name, they represented the same set of visible colors you could tell a
screen to display. While this is conceptually simple, there are some major
downsides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As monitors have improved over time, they&amp;rsquo;ve become capable of displaying more
colors than can be represented in the sRGB color space.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sRGB, even when you&amp;rsquo;re using it via &lt;code&gt;hsl()&lt;/code&gt;, doesn&amp;rsquo;t correspond very well with
how humans perceive colors. Cyan looks noticeably lighter than purple with the
same saturation and lightness values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There&amp;rsquo;s no way to represent domain- or device-specific color spaces, such as
the &lt;a href="https://en.wikipedia.org/wiki/CMYK_color_model"&gt;CMYK&lt;/a&gt; color space that&amp;rsquo;s used by printers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Color spaces solve all of these problems. Now not every color has a red, green,
and blue channel (which can be interpreted as hue, saturation, and lightness).
Instead, every color has a specific &lt;em&gt;color space&lt;/em&gt; which specifies which
channels it has. For example, the color &lt;code&gt;oklch(80% 50% 90deg)&lt;/code&gt; has &lt;code&gt;oklch&lt;/code&gt; as
its color space, &lt;code&gt;80%&lt;/code&gt; lightness, &lt;code&gt;50%&lt;/code&gt; chroma, and &lt;code&gt;90deg&lt;/code&gt; hue.&lt;/p&gt;

&lt;h2 id="color-spaces-in-sass"&gt;
&lt;a class="anchor" href="#color-spaces-in-sass"&gt;&lt;span class="visuallyhidden"&gt;Color Spaces in Sass permalink&lt;/span&gt;&lt;/a&gt;Color Spaces in Sass&lt;/h2&gt;

&lt;p&gt;Today we&amp;rsquo;re announcing &lt;a href="https://github.com/sass/sass/blob/main/proposal/color-4-new-spaces.md"&gt;a proposal for how to handle color spaces in Sass&lt;/a&gt;. In
addition to expanding Sass&amp;rsquo;s color values to support color spaces, this proposal
defines Sassified versions of all the color functions in &lt;a href="https://www.w3.org/TR/css-color-4/"&gt;CSS Color Level
4&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="rules-of-thumb"&gt;
&lt;a class="anchor" href="#rules-of-thumb"&gt;&lt;span class="visuallyhidden"&gt;Rules of Thumb permalink&lt;/span&gt;&lt;/a&gt;Rules of Thumb&lt;/h3&gt;

&lt;p&gt;There are several rules of thumb for working with color spaces in Sass:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;rgb&lt;/code&gt;, &lt;code&gt;hsl&lt;/code&gt;, and &lt;code&gt;hwb&lt;/code&gt; spaces are considered &amp;ldquo;legacy spaces&amp;rdquo;, and will
often get special handling for the sake of backwards compatibility. Colors
defined using hex notation or CSS color names are considered part of the &lt;code&gt;rgb&lt;/code&gt;
color space. Legacy colors are emitted in the most compatible format. This
matches CSS&amp;rsquo;s own backwards-compatibility behavior.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Otherwise, any color defined in a given space will remain in that space, and
be emitted in that space.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Authors can explicitly convert a color&amp;rsquo;s space by using &lt;code&gt;color.to-space()&lt;/code&gt;.
This can be useful to enforce non-legacy behavior, by converting into a
non-legacy space, or to ensure the color output is compatible with older
browsers by converting colors into a legacy space before emitting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;srgb&lt;/code&gt; color space is equivalent to &lt;code&gt;rgb&lt;/code&gt;, except that one is a legacy
space, and the other is not. They also use different coordinate systems, with
&lt;code&gt;rgb()&lt;/code&gt; accepting a range from 0-255, and &lt;code&gt;srgb&lt;/code&gt; using a range of 0-1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Color functions that allow specifying a color space for manipulation will
always use the source color space by default. When an explicit space is
provided for manipulation, the resulting color will still be returned in the
same space as the origin color. For &lt;code&gt;color.mix()&lt;/code&gt;, the first color parameter
is considered the origin color.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All legacy and RGB-style spaces represent bounded gamuts of color. Since
mapping colors into gamut is a lossy process, it should generally be left to
browsers, which can map colors as-needed, based on the capabilities of a
display. For that reason, out-of-gamut channel values are maintained by Sass
whenever possible, even when converting into gamut-bounded color spaces. The
only exception is that &lt;code&gt;hsl&lt;/code&gt; and &lt;code&gt;hwb&lt;/code&gt; color spaces are not able to express
out-of-gamut color, so converting colors into those spaces will gamut-map the
colors as well. Authors can also perform explicit gamut mapping with the
&lt;code&gt;color.to-gamut()&lt;/code&gt; function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Legacy browsers require colors in the &lt;code&gt;srgb&lt;/code&gt; gamut. However, most modern
displays support the wider &lt;code&gt;display-p3&lt;/code&gt; gamut.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="standard-css-color-functions"&gt;
&lt;a class="anchor" href="#standard-css-color-functions"&gt;&lt;span class="visuallyhidden"&gt;Standard CSS Color Functions permalink&lt;/span&gt;&lt;/a&gt;Standard CSS Color Functions&lt;/h3&gt;

&lt;h4 id="oklab-and-oklch"&gt;
&lt;a class="anchor" href="#oklab-and-oklch"&gt;&lt;span class="visuallyhidden"&gt;oklab() and oklch() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;oklab()&lt;/code&gt; and &lt;code&gt;oklch()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;oklab()&lt;/code&gt; (cubic) and &lt;code&gt;oklch()&lt;/code&gt; (cylindrical) functions provide access to an
unbounded gamut of colors in a perceptually uniform space. Authors can use these
functions to define reliably uniform colors. For example, the following colors
are perceptually similar in lightness and saturation:&lt;/p&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$pink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;oklch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;64%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.196&lt;/span&gt; &lt;span class="m"&gt;353&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// hsl(329.8 70.29% 58.75%)
&lt;/span&gt;&lt;span class="nv"&gt;$blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;oklch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;64%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.196&lt;/span&gt; &lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// hsl(207.4 99.22% 50.69%)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;oklch()&lt;/code&gt; format uses consistent &amp;ldquo;lightness&amp;rdquo; and &amp;ldquo;chroma&amp;rdquo; values, while the
&lt;code&gt;hsl()&lt;/code&gt; format shows dramatic changes in both &amp;ldquo;lightness&amp;rdquo; and &amp;ldquo;saturation&amp;rdquo;. As
such, &lt;code&gt;oklch&lt;/code&gt; is often the best space for consistent transforms.&lt;/p&gt;

&lt;h4 id="lab-and-lch"&gt;
&lt;a class="anchor" href="#lab-and-lch"&gt;&lt;span class="visuallyhidden"&gt;lab() and lch() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;lab()&lt;/code&gt; and &lt;code&gt;lch()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;lab()&lt;/code&gt; and &lt;code&gt;lch()&lt;/code&gt; functions provide access to an unbounded gamut of colors
in a space that&amp;rsquo;s less perpetually-uniform but more widely-adopted than OKLab
and OKLCH.&lt;/p&gt;

&lt;h4 id="hwb"&gt;
&lt;a class="anchor" href="#hwb"&gt;&lt;span class="visuallyhidden"&gt;hwb() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;hwb()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;Sass now supports a top-level &lt;code&gt;hwb()&lt;/code&gt; function that uses the same syntax as
CSS&amp;rsquo;s built-in &lt;code&gt;hwb()&lt;/code&gt; syntax.&lt;/p&gt;

&lt;h4 id="color"&gt;
&lt;a class="anchor" href="#color"&gt;&lt;span class="visuallyhidden"&gt;color() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;color()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The new &lt;code&gt;color()&lt;/code&gt; function provides access to a number of specialty spaces. Most
notably, &lt;code&gt;display-p3&lt;/code&gt; is a common space for wide-gamut monitors, making it
likely one of the more popular options for authors who simply want access to a
wider range of colors. For example, P3 greens are significantly &amp;lsquo;brighter&amp;rsquo; and
more saturated than the greens available in sRGB:&lt;/p&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$fallback-green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$brighter-green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;display-p3&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sass will natively support all predefined color spaces declared in the Colors
Level 4 specification. It will also support unknown color spaces, although these
can&amp;rsquo;t be converted to and from any other color space.&lt;/p&gt;

&lt;h3 id="new-sass-color-functions"&gt;
&lt;a class="anchor" href="#new-sass-color-functions"&gt;&lt;span class="visuallyhidden"&gt;New Sass Color Functions permalink&lt;/span&gt;&lt;/a&gt;New Sass Color Functions&lt;/h3&gt;

&lt;h4 id="color-channel"&gt;
&lt;a class="anchor" href="#color-channel"&gt;&lt;span class="visuallyhidden"&gt;color.channel() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;color.channel()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;This function returns the value of a single channel in a color. By default, it
only supports channels that are available in the color&amp;rsquo;s own space, but you can
pass the &lt;code&gt;$space&lt;/code&gt; parameter to return the value of the channel after converting
to the given space.&lt;/p&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$brand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="mi"&gt;.1%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// result: 25.1%
&lt;/span&gt;&lt;span class="nv"&gt;$hsl-lightness&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$brand&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"lightness"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// result: 37.67%
&lt;/span&gt;&lt;span class="nv"&gt;$oklch-lightness&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$brand&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"lightness"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oklch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="color-space"&gt;
&lt;a class="anchor" href="#color-space"&gt;&lt;span class="visuallyhidden"&gt;color.space() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;color.space()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;This function returns the name of the color&amp;rsquo;s space.&lt;/p&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// result: hsl
&lt;/span&gt;&lt;span class="nv"&gt;$hsl-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;space&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="mi"&gt;.1%&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// result: oklch
&lt;/span&gt;&lt;span class="nv"&gt;$oklch-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;space&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;oklch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;37&lt;/span&gt;&lt;span class="mi"&gt;.7%&lt;/span&gt; &lt;span class="m"&gt;38&lt;/span&gt;&lt;span class="mi"&gt;.75%&lt;/span&gt; &lt;span class="m"&gt;29&lt;/span&gt;&lt;span class="mi"&gt;.23deg&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="color-is-in-gamut-color-is-legacy"&gt;
&lt;a class="anchor" href="#color-is-in-gamut-color-is-legacy"&gt;&lt;span class="visuallyhidden"&gt;color.is-in-gamut(), color.is-legacy() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;color.is-in-gamut()&lt;/code&gt;, &lt;code&gt;color.is-legacy()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;These functions return various facts about the color. &lt;code&gt;color.is-in-gamut()&lt;/code&gt;
returns whether the color is in-gamut for its color space (as opposed to having
one or more of its channels out of bounds, like &lt;code&gt;rgb(300 0 0)&lt;/code&gt;).
&lt;code&gt;color.is-legacy()&lt;/code&gt; returns whether the color is a legacy color in the &lt;code&gt;rgb&lt;/code&gt;,
&lt;code&gt;hsl&lt;/code&gt;, or &lt;code&gt;hwb&lt;/code&gt; color space.&lt;/p&gt;

&lt;h4 id="color-is-powerless"&gt;
&lt;a class="anchor" href="#color-is-powerless"&gt;&lt;span class="visuallyhidden"&gt;color.is-powerless() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;color.is-powerless()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;This function returns whether a given channel is &amp;ldquo;powerless&amp;rdquo; in the given color.
This is a special state that&amp;rsquo;s defined for individual color spaces, which
indicates that a channel&amp;rsquo;s value won&amp;rsquo;t affect how a color is displayed.&lt;/p&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$grey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// result: true, because saturation is 0
&lt;/span&gt;&lt;span class="nv"&gt;$hue-powerless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is-powerless&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$grey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"hue"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// result: false
&lt;/span&gt;&lt;span class="nv"&gt;$hue-powerless&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is-powerless&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$grey&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"lightness"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="color-same"&gt;
&lt;a class="anchor" href="#color-same"&gt;&lt;span class="visuallyhidden"&gt;color.same() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;color.same()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;This function returns whether two colors will be displayed the same way, even if
this requires converting between spaces. This is unlike the &lt;code&gt;==&lt;/code&gt; operator, which
always considers colors in different non-legacy spaces to be inequal.&lt;/p&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$orange-rgb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ff5f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$orange-oklch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;oklch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;68&lt;/span&gt;&lt;span class="mi"&gt;.72%&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="mi"&gt;.966858279%&lt;/span&gt; &lt;span class="m"&gt;41&lt;/span&gt;&lt;span class="mi"&gt;.4189852913deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// result: false
&lt;/span&gt;&lt;span class="nv"&gt;$equal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$orange-rgb&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$orange-oklch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// result: true
&lt;/span&gt;&lt;span class="nv"&gt;$same&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;same&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$orange-rgb&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$orange-oklch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="existing-sass-color-functions"&gt;
&lt;a class="anchor" href="#existing-sass-color-functions"&gt;&lt;span class="visuallyhidden"&gt;Existing Sass Color Functions permalink&lt;/span&gt;&lt;/a&gt;Existing Sass Color Functions&lt;/h3&gt;

&lt;h4 id="color-scale-color-adjust-and-color-change"&gt;
&lt;a class="anchor" href="#color-scale-color-adjust-and-color-change"&gt;&lt;span class="visuallyhidden"&gt;color.scale(), color.adjust(), and color.change() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;color.scale()&lt;/code&gt;, &lt;code&gt;color.adjust()&lt;/code&gt;, and &lt;code&gt;color.change()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;By default, all Sass color transformations are handled and returned in the color
space of the original color parameter. However, all relevant functions now allow
specifying an explicit color space for transformations. For example, lightness &amp;amp;
darkness adjustments are most reliable in &lt;code&gt;oklch&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$brand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;25&lt;/span&gt;&lt;span class="mi"&gt;.1%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// result: hsl(0 100% 43.8%)
&lt;/span&gt;&lt;span class="nv"&gt;$hsl-lightness&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$brand&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lightness&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// result: hsl(5.76 56% 45.4%)
&lt;/span&gt;&lt;span class="nv"&gt;$oklch-lightness&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$brand&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$lightness&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$space&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oklch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the returned color is still emitted in the original color space, even
when the adjustment is performed in a different space.&lt;/p&gt;

&lt;h4 id="color-mix"&gt;
&lt;a class="anchor" href="#color-mix"&gt;&lt;span class="visuallyhidden"&gt;color.mix() permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;color.mix()&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;color.mix()&lt;/code&gt; function will retain its existing behavior for legacy color
spaces, but for new color spaces it will match CSS&amp;rsquo;s &amp;ldquo;color interpolation&amp;rdquo;
specification. This is how CSS computes which color to use in between two colors
in a gradient or an animation.&lt;/p&gt;

&lt;h4 id="deprecations"&gt;
&lt;a class="anchor" href="#deprecations"&gt;&lt;span class="visuallyhidden"&gt;Deprecations permalink&lt;/span&gt;&lt;/a&gt;Deprecations&lt;/h4&gt;

&lt;p&gt;A number of existing functions only make sense for legacy colors, and so are
being deprecated in favor of color-space-friendly functions like
&lt;code&gt;color.channel()&lt;/code&gt; and &lt;code&gt;color.adjust()&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;color.red()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color.green()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color.blue()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color.hue()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color.saturation()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color.lightness()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color.whiteness()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;color.blackness()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adjust-hue()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saturate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;desaturate()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transparentize()&lt;/code&gt;/&lt;code&gt;fade-out()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;opacify()&lt;/code&gt;/&lt;code&gt;fade-in()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lighten()&lt;/code&gt;/&lt;code&gt;darken()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="let-us-know-what-you-think"&gt;
&lt;a class="anchor" href="#let-us-know-what-you-think"&gt;&lt;span class="visuallyhidden"&gt;Let Us Know What You Think! permalink&lt;/span&gt;&lt;/a&gt;Let Us Know What You Think!&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s lots more detail to this proposal, and it&amp;rsquo;s not set in stone yet. We
want your feedback on it! Read it over &lt;a href="https://github.com/sass/sass/blob/main/proposal/color-4-new-spaces.md#deprecated-functions"&gt;on GitHub&lt;/a&gt;, and &lt;a href="https://github.com/sass/sass/issues/new"&gt;file an issue&lt;/a&gt; with any
thoughts or concerns you may have.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Request for Comments: Strict Unary Operators</title>
    <link href="https://sass-lang.com/blog/request-for-comments-strict-unary-operators" rel="alternate"/>
    <id>https://sass-lang.com/blog/request-for-comments-strict-unary-operators</id>
    <published>2022-06-15T23:30:00+00:00</published>
    <updated>2023-03-10T23:48:42+00:00</updated>
    <author>
      <name>Natalie Weizenbaum</name>
    </author>
    <content type="html">&lt;p&gt;Do you know what &lt;code&gt;margin: $a -$b&lt;/code&gt; does in Sass? If you said &amp;ldquo;the same thing as
&lt;code&gt;margin: $a (-$b)&lt;/code&gt;, I&amp;rsquo;m sorry, but you&amp;rsquo;re wrong. It&amp;rsquo;s &lt;em&gt;actually&lt;/em&gt; the same thing
as &lt;code&gt;margin: $a - $b&lt;/code&gt;. Don&amp;rsquo;t worry, you&amp;rsquo;re not the first person to get tripped up
by this weird corner of Sass&amp;rsquo;s parser! But our new language proposal aims to fix
that.&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://github.com/sass/sass/blob/main/proposal/strict-unary.md"&gt;Strict Unary Operators&lt;/a&gt; proposal, which is currently open for community
feedback, we propose to first deprecate and then eventually disallow expressions
of the form &lt;code&gt;$a -$b&lt;/code&gt;. We know deprecations are never pleasant, but this should
be fairly painless as they go: you can simply write &lt;code&gt;$a - $b&lt;/code&gt; or &lt;code&gt;$a (-$b)&lt;/code&gt;,
depending which you intend. We&amp;rsquo;ll also provide a &lt;a href="https://sass-lang.com/documentation/cli/migrator"&gt;Sass migrator&lt;/a&gt; migration to
automatically update your stylesheets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deprecated:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$a -$b&lt;/code&gt; will no longer be allowed, because it&amp;rsquo;s unclear what the author
intended and the current behavior is likely to be incorrect.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Still allowed:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$a - $b&lt;/code&gt; will continue to work, since it&amp;rsquo;s clearly supposed to indicate
subtraction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$a (-$b)&lt;/code&gt; will continue to work, since the parentheses make the unary minus
unambiguous.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;$a - $b&lt;/code&gt; or &lt;code&gt;$a (-$b)&lt;/code&gt; options are supported by all widely-used Sass
versions, so there shouldn&amp;rsquo;t be any trouble for libraries to avoid this
deprecation warning and continue to support older Sass versions. In addition,
you can always use the &lt;a href="https://sass-lang.com/documentation/cli/dart-sass#quiet-deps"&gt;&lt;code&gt;--quiet-deps&lt;/code&gt; command-line flag&lt;/a&gt; or the &lt;a href="https://sass-lang.com/documentation/js-api/interfaces/Options#quietDeps"&gt;&lt;code&gt;quietDeps&lt;/code&gt; JS
API option&lt;/a&gt; to silence warnings from dependencies you don&amp;rsquo;t control.&lt;/p&gt;

&lt;h2 id="why-does-it-work-this-way"&gt;
&lt;a class="anchor" href="#why-does-it-work-this-way"&gt;&lt;span class="visuallyhidden"&gt;Why does it work this way? permalink&lt;/span&gt;&lt;/a&gt;Why does it work this way?&lt;/h2&gt;

&lt;p&gt;Why, you might wonder, does &lt;code&gt;$a -$b&lt;/code&gt; parse this way in the first place? The
short answer is, &amp;quot;because other programming languages do it that way&amp;rdquo;. In most
programming languages, operators are parsed the same way regardless of the
whitespace that may or may not surround them. If you parse &lt;code&gt;$a - $b&lt;/code&gt; as
subtraction, you should parse &lt;code&gt;$a -$b&lt;/code&gt; as subtraction as well.&lt;/p&gt;

&lt;p&gt;The problem for Sass is that we also inherit CSS&amp;rsquo;s use of space-separated lists
of values, so in some contexts users expect to be able to write two expressions
next to one another and have them parse the same way they would if they were
each used on their own. These two principles come into conflict and produce the
confusion this proposal seeks to address.&lt;/p&gt;

&lt;h2 id="why-not-just-change-the-way-it-works"&gt;
&lt;a class="anchor" href="#why-not-just-change-the-way-it-works"&gt;&lt;span class="visuallyhidden"&gt;Why not just change the way it works? permalink&lt;/span&gt;&lt;/a&gt;Why not just change the way it works?&lt;/h2&gt;

&lt;p&gt;In theory, we could change Sass so that &lt;code&gt;$a -$b&lt;/code&gt; parses the same as &lt;code&gt;$a (-$b)&lt;/code&gt;:
a space-separated list of two values, the latter with a unary minus. We chose
not to do that for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Pragmatically, it&amp;rsquo;s more painful to make a breaking change that changes the
behavior of existing syntax than it is to make one that just forbids the
syntax entirely. It requires more releases and more different versions of
Sass with different behaviors. It also opens the door for a stylesheet that
upgrades many versions at once to switch to the new behavior &lt;em&gt;without
producing an error&lt;/em&gt;, which could lead to the worst-case scenario: shipping
incorrect styles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It&amp;rsquo;s not obvious that &lt;code&gt;$a -$b&lt;/code&gt; &lt;em&gt;should&lt;/em&gt; parse as &lt;code&gt;$a (-$b)&lt;/code&gt; in every case.
Users coming from other programming languages may expect it to parse the same
way it does in those languages. Even in Sass, &lt;code&gt;$a -$b&lt;/code&gt; will continue to be a
valid binary operation within &lt;code&gt;calc()&lt;/code&gt;. It may not be elegant style, but
sometimes formatting isn&amp;rsquo;t at the top of an author&amp;rsquo;s mind!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="let-us-know-what-you-think"&gt;
&lt;a class="anchor" href="#let-us-know-what-you-think"&gt;&lt;span class="visuallyhidden"&gt;Let us know what you think! permalink&lt;/span&gt;&lt;/a&gt;Let us know what you think!&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;ve got thoughts or opinions about this change, please read over &lt;a href="https://github.com/sass/sass/blob/main/proposal/strict-unary.md"&gt;the full
proposal&lt;/a&gt; and then &lt;a href="https://github.com/sass/sass/issues/new"&gt;file an issue&lt;/a&gt; with your feedback. We&amp;rsquo;ll be leaving this
open to comments for a month, after which we&amp;rsquo;ll finalize the proposal and start
implementing it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Embedded Sass is Live</title>
    <link href="https://sass-lang.com/blog/embedded-sass-is-live" rel="alternate"/>
    <id>https://sass-lang.com/blog/embedded-sass-is-live</id>
    <published>2022-02-01T10:00:00+00:00</published>
    <updated>2023-03-10T23:48:42+00:00</updated>
    <author>
      <name>Natalie Weizenbaum</name>
    </author>
    <content type="html">&lt;p&gt;After several years of planning and development, I&amp;rsquo;m excited to finally announce
the stable release of Embedded Dart Sass along with its first official wrapper,
the &lt;a href="https://www.npmjs.com/package/sass-embedded"&gt;&lt;code&gt;sass-embedded&lt;/code&gt;&lt;/a&gt; package available now on npm!&lt;/p&gt;

&lt;p&gt;Embedded Sass is an ongoing effort to make a highly-performant Sass library
available to as many different languages as possible, starting with Node.js.
Although Node.js already has access to the pure-JS &lt;code&gt;sass&lt;/code&gt; package, the nature of
JavaScript inherently limits how quickly this package can process large Sass
files especially in asynchronous mode. We expect &lt;code&gt;sass-embedded&lt;/code&gt; to be a major
boon to developers for whom compilation speed is a concern, particularly the
remaining users of &lt;code&gt;node-sass&lt;/code&gt; for whom performance has been a major reason to
avoid Dart Sass.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sass-embedded&lt;/code&gt; package fully supports the &lt;a href="https://sass-lang.com/documentation/js-api#usage"&gt;new JS API&lt;/a&gt; as well as the
&lt;a href="https://sass-lang.com/documentation/js-api#legacy-api"&gt;legacy API&lt;/a&gt; other than a few cosmetic options. You can use it as a drop-in
replacement for the &lt;code&gt;sass&lt;/code&gt; package, and it should work with all the same build
plugins and libraries. Note that &lt;code&gt;sass-embedded&lt;/code&gt; is a bit faster in
&lt;em&gt;asynchronous&lt;/em&gt; mode than it is in synchronous mode (whereas the &lt;code&gt;sass&lt;/code&gt; package
was faster in synchronous mode). For substantial Sass files, running
&lt;code&gt;sass-embedded&lt;/code&gt; in either mode will generally be much faster than &lt;code&gt;sass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to limit the confusion about which version of which package supports
which feature, the &lt;code&gt;sass-embedded&lt;/code&gt; package will always have the same version as
the &lt;code&gt;sass&lt;/code&gt; package. When new features are added to the JS API, they&amp;rsquo;ll be
supported at the same time in both packages, and when new language features are
added to Sass they&amp;rsquo;ll always be included in a new &lt;code&gt;sass-embedded&lt;/code&gt; release
straight away.&lt;/p&gt;

&lt;h2 id="how-it-works"&gt;
&lt;a class="anchor" href="#how-it-works"&gt;&lt;span class="visuallyhidden"&gt;How it Works permalink&lt;/span&gt;&lt;/a&gt;How it Works&lt;/h2&gt;

&lt;p&gt;Embedded Sass is composed of three parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sass/dart-sass-embedded"&gt;The compiler&lt;/a&gt;, a Dart executable that wraps Dart Sass and does the actual
heavy lifting of parsing and compiling the files. Dart native executables are
generally much faster than JavaScript, so using them for the
computationally-intensive work of stylesheet evaluation is where Embedded
Sass gets its speed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sass/embedded-host-node"&gt;The host&lt;/a&gt;, a library in any language (in this case JavaScript) that provides a
usable end-user API for invoking the compiler. The host provides callers with
configuration options, including the ability to define custom importers and
Sass functions that are used by the compilation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sass/embedded-protocol"&gt;The protocol&lt;/a&gt;, a &lt;a href="https://en.wikipedia.org/wiki/Protocol_Buffers"&gt;protocol-buffer&lt;/a&gt;-based specification of how the host and
the compiler communicate with one another. This communication happens over
the standard input and output streams of the compiler executable, which is
invoked by the host to perform each compilation.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="other-languages"&gt;
&lt;a class="anchor" href="#other-languages"&gt;&lt;span class="visuallyhidden"&gt;Other Languages permalink&lt;/span&gt;&lt;/a&gt;Other Languages&lt;/h2&gt;

&lt;p&gt;Embedded Sass was designed in part as a way for languages other than JavaScript
to have access to the full power of Sass compilation with custom importers and
functions, similarly to how C++ wrappers for &lt;a href="https://sass-lang.com/libsass"&gt;LibSass&lt;/a&gt; worked in the past. We
hope that community members will use this protocol to implement embedded hosts
for many other popular frontend languages. If you end up doing so, message us
&lt;a href="https://twitter.com/SassCSS"&gt;on Twitter&lt;/a&gt; or &lt;a href="https://gitter.im/sass/sass"&gt;Gitter&lt;/a&gt; and we&amp;rsquo;ll link it on this site!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>New JS API Release Candidate is Live</title>
    <link href="https://sass-lang.com/blog/new-js-api-release-candidate" rel="alternate"/>
    <id>https://sass-lang.com/blog/new-js-api-release-candidate</id>
    <published>2021-11-21T00:15:00+00:00</published>
    <updated>2023-03-10T23:48:42+00:00</updated>
    <author>
      <name>Natalie Weizenbaum</name>
    </author>
    <content type="html">&lt;p&gt;The new JavaScript API that we &lt;a href="https://sass-lang.com/blog/request-for-comments-new-js-api"&gt;announced a few months ago&lt;/a&gt; is now fully
implemented in Dart Sass and ready for you to try! The new API is designed to be
more idiomatic, performant, and usable than the old one, and we hope it&amp;rsquo;ll be
adopted swiftly by tooling packages.&lt;/p&gt;

&lt;p&gt;Because this is such a substantial addition, we want to give users a chance to
kick the tires a bit before we set it in stone, so we&amp;rsquo;ve released it as a release
candidate in Dart Sass 1.45.0-rc.1. Download it, try it out, and let us know
what you think by &lt;a href="https://github.com/sass/sass/issues/new"&gt;filing issues&lt;/a&gt; or &lt;a href="https://twitter.com/SassCSS"&gt;sending us a tweet&lt;/a&gt;. Unless major changes
are necessary, we plan to make a stable release some time next week.&lt;/p&gt;

&lt;h2 id="how-to-use-it"&gt;
&lt;a class="anchor" href="#how-to-use-it"&gt;&lt;span class="visuallyhidden"&gt;How to use it permalink&lt;/span&gt;&lt;/a&gt;How to use it&lt;/h2&gt;

&lt;p&gt;The new API comes with four new entrypoint functions: &lt;code&gt;compile()&lt;/code&gt; and
&lt;code&gt;compileAsync()&lt;/code&gt; take Sass file paths and return the result of compiling them to
CSS, while &lt;code&gt;compileString()&lt;/code&gt; and &lt;code&gt;compileStringAsync()&lt;/code&gt; take a
string of Sass source and compile it to CSS. Unlike the old API, the async
functions all return &lt;code&gt;Promise&lt;/code&gt;s. As with the old API, the synchronous functions
are substantially faster than their async counterparts, so we recommend using
them if at all possible.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sass'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compileString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="nx"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;font&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;face&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Roboto&lt;/span&gt; &lt;span class="nx"&gt;Mono&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check out &lt;a href="/documentation/js-api"&gt;the API docs&lt;/a&gt; for more details on the API, including the brand-new
importer and custom function APIs.&lt;/p&gt;

&lt;h2 id="what-about-the-old-api"&gt;
&lt;a class="anchor" href="#what-about-the-old-api"&gt;&lt;span class="visuallyhidden"&gt;What about the old API? permalink&lt;/span&gt;&lt;/a&gt;What about the old API?&lt;/h2&gt;

&lt;p&gt;Once the new API has a stable release, we&amp;rsquo;ll officially consider the old API to
be deprecated. Since it&amp;rsquo;s still widely-used, we&amp;rsquo;ll continue to maintain it for a
good long while going forward. Expect it to start printing a deprecation warning
in a year or so, and to be disabled for good once we release Dart Sass 2.0.0.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Request for Comments: New JS API</title>
    <link href="https://sass-lang.com/blog/request-for-comments-new-js-api" rel="alternate"/>
    <id>https://sass-lang.com/blog/request-for-comments-new-js-api</id>
    <published>2021-08-05T23:30:00+00:00</published>
    <updated>2023-03-10T23:48:42+00:00</updated>
    <author>
      <name>Natalie Weizenbaum</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;m excited to officially unveil something that&amp;rsquo;s been in the works for quite a
while now: a (proposal for a) brand new JavaScript API for Sass. This API has
been redesigned from the ground up based on lessons learned from both the Node
Sass API and various other historical Sass APIs in other languages through the
years, and it addresses many of the shortcomings of the existing API.&lt;/p&gt;

&lt;p&gt;The API has four main components, all of which I&amp;rsquo;ll cover in this post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#compilation"&gt;The core compilation API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#loggers"&gt;The logger API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#importers"&gt;The importer API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions"&gt;The function API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you read on, remember that this API is still just a proposal. We want to hear
from you, our users, whether it meets your needs and how we can improve it
before we lock it in to a full release. So go ahead and make your voices known
&lt;a href="https://github.com/sass/sass/issues/new"&gt;on the issue tracker&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id="why-a-new-api"&gt;
&lt;a class="anchor" href="#why-a-new-api"&gt;&lt;span class="visuallyhidden"&gt;Why a New API? permalink&lt;/span&gt;&lt;/a&gt;Why a New API?&lt;/h2&gt;

&lt;p&gt;The existing JavaScript API is showing its age. It predates Dart Sass, having
been originally designed for the &lt;code&gt;node-sass&lt;/code&gt; package, which wrapped the
now-&lt;a href="/libsass"&gt;deprecated&lt;/a&gt; implementation. (That&amp;rsquo;s why we call it the &amp;ldquo;Node Sass
API&amp;rdquo;!) It grew organically and often messily along with LibSass, and ended up
with more than a few awkward legacy behaviors. Many of these behaviors are more
of a pain for implementation than anything else, but a few of them made life
quite difficult:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The importer API was built around file paths rather than URLs, and was tightly
coupled to the physical filesystem. This made it impossible to override &lt;em&gt;all&lt;/em&gt;
file-based loads and present a fully virtual filesystem, and caused custom
Node importers to interact poorly with the new &lt;a href="https://sass-lang.com/blog/the-module-system-is-launched"&gt;module system&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The function API was built around mutable value objects, which runs counter to
Sass&amp;rsquo;s immutable nature. It also provided no utility methods (such as looking
up a key in a map) to make it easier to implement idiomatic custom functions,
and didn&amp;rsquo;t provide access to crucial information about values such as whether
strings were quoted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All of the asynchronous functions were callback-based rather than
promise-based.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The new API addresses these issues and more with a modern, idiomatic API that
will make working with Sass from JS a breeze.&lt;/p&gt;

&lt;h2 id="compilation"&gt;
&lt;a class="anchor" href="#compilation"&gt;&lt;span class="visuallyhidden"&gt;Compilation permalink&lt;/span&gt;&lt;/a&gt;Compilation&lt;/h2&gt;

&lt;p&gt;At the heart of the API are four functions that do the actual Sass compilation,
two synchronous and two asynchronous. They&amp;rsquo;re presented here in TypeScript
syntax to clarify exactly what they take and return, but you can always call
them from plain JS:&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s1"&gt;'sync'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CompileResult&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compileString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;StringOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s1"&gt;'sync'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CompileResult&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compileAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s1"&gt;'async'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CompileResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compileStringAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;StringOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s1"&gt;'async'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CompileResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;compile()&lt;/code&gt; and &lt;code&gt;compileAsync()&lt;/code&gt; functions load a Sass file from a path on
disk, whereas &lt;code&gt;compileString()&lt;/code&gt; and &lt;code&gt;compileStringAsync()&lt;/code&gt; compile Sass source
code passed in as a string. All these take the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alertAscii&lt;/code&gt;: Whether errors and warnings should use only ASCII characters (as
opposed to, for example, Unicode box-drawing characters).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alertColor&lt;/code&gt;: Whether errors and warnings should use terminal colors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loadPaths&lt;/code&gt;: A list of file paths to use to look up files to load, just like
&lt;code&gt;includePaths&lt;/code&gt; in the old API.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;importers&lt;/code&gt;: A list of &lt;a href="#importers"&gt;custom importers&lt;/a&gt; to use to load Sass
source files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;functions&lt;/code&gt;: An object whose keys are Sass function signatures and whose
values are &lt;a href="#functions"&gt;custom functions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quietDeps&lt;/code&gt;: Whether to silence deprecation warnings in dependencies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logger&lt;/code&gt;: The &lt;a href="#loggers"&gt;custom logger&lt;/a&gt; to use to emit warnings and debug
messages.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourceMap&lt;/code&gt;: Whether to generate a source map during compilation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;style&lt;/code&gt;: The output style, &lt;code&gt;&amp;#39;compressed&amp;#39;&lt;/code&gt; or &lt;code&gt;&amp;#39;expanded&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;: Whether to emit every deprecation warning encountered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;compileString()&lt;/code&gt; and &lt;code&gt;compileStringAsync()&lt;/code&gt; functions take a few additional
options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;syntax&lt;/code&gt;: The syntax of the file, &lt;code&gt;&amp;#39;scss&amp;#39;&lt;/code&gt; (the default), &lt;code&gt;&amp;#39;indented&amp;#39;&lt;/code&gt;, or
&lt;code&gt;&amp;#39;css&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: The &lt;a href="#canonicalizing"&gt;canonical URL&lt;/a&gt; of the file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;importer&lt;/code&gt;: The &lt;a href="#importers"&gt;custom importer&lt;/a&gt; to treat as the file&amp;rsquo;s source.
If this is passed, this importer will be used to resolve relative loads from
this stylesheet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these functions return an object with the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;css&lt;/code&gt;: The compiled CSS, as a string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loadedUrls&lt;/code&gt;: All the URLs loaded during the compilation, in no particular
order.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourceMap&lt;/code&gt;: The source map for the file if &lt;code&gt;sourceMap: true&lt;/code&gt; was passed, as
a decoded object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As with the Node Sass API, the synchronous functions will be substantially
faster than their asynchronous counterparts. Unfortunately the new API will not
support the &lt;code&gt;fibers&lt;/code&gt; option for speeding up asynchronous compilation, since &lt;a href="/blog/node-fibers-discontinued"&gt;the
&lt;code&gt;fibers&lt;/code&gt; package has been discontinued&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="loggers"&gt;
&lt;a class="anchor" href="#loggers"&gt;&lt;span class="visuallyhidden"&gt;Loggers permalink&lt;/span&gt;&lt;/a&gt;Loggers&lt;/h2&gt;

&lt;p&gt;The logger API gives you more fine-grained control over how and when warnings
and debug messages are emitted. Unlike other aspects of this proposal, a
&lt;code&gt;logger&lt;/code&gt; option will also be added to the &lt;em&gt;old&lt;/em&gt; API to allow you to control your
messages there without needing to upgrade to the new API immediately.&lt;/p&gt;

&lt;p&gt;A logger implements the following interface:&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Logger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;?(&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;deprecation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;SourceSpan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;?(&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;span&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SourceSpan&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;warn&lt;/code&gt; function handles warnings, including both warnings from the compiler
itself and from &lt;code&gt;@warn&lt;/code&gt; rules. It&amp;rsquo;s passed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The warning message&lt;/li&gt;
&lt;li&gt;A flag indicating whether it&amp;rsquo;s specifically a deprecation warning&lt;/li&gt;
&lt;li&gt;A span indicating where the warning was located, if it comes from a specific
location&lt;/li&gt;
&lt;li&gt;The Sass stack trace at the point at which the warning was encountered, if it
was encountered during execution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;debug&lt;/code&gt; function handles only &lt;code&gt;@debug&lt;/code&gt; rules, and is just passed the message
and the rule&amp;rsquo;s span. For more information on the &lt;code&gt;SourceSpan&lt;/code&gt; type, see &lt;a href="https://github.com/sass/sass/tree/main/proposal/js-logger.d.ts"&gt;the
Logger proposal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sass will also provide a built-in logger, &lt;code&gt;Logger.silent&lt;/code&gt;, that never emits any
messages. This will allow you to easily run Sass in &amp;ldquo;quiet mode&amp;rdquo; where no
warnings are ever surfaced.&lt;/p&gt;

&lt;h2 id="importers"&gt;
&lt;a class="anchor" href="#importers"&gt;&lt;span class="visuallyhidden"&gt;Importers permalink&lt;/span&gt;&lt;/a&gt;Importers&lt;/h2&gt;

&lt;p&gt;Rather than modeling importers as single-function callbacks, the new API models
them as objects that expose two methods: one that &lt;em&gt;canonicalizes&lt;/em&gt; a URL, and one
that &lt;em&gt;loads&lt;/em&gt; a canonical URL.&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Importers for compileAsync() and compileStringAsync() are the same, except&lt;/span&gt;
&lt;span class="c1"&gt;// they may return Promises as well.&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Importer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;canonicalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;fromImport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canonicalUrl&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImporterResult&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that even stylesheets that are loaded directly from the filesystem through
&lt;code&gt;compile()&lt;/code&gt; or &lt;code&gt;loadPaths&lt;/code&gt; are treated as though they&amp;rsquo;re loaded by an importer.
This built-in filesystem importer canonicalizes all paths to &lt;code&gt;file:&lt;/code&gt; URLs, and
loads those URLs from the physical filesystem.&lt;/p&gt;

&lt;h3 id="canonicalizing"&gt;
&lt;a class="anchor" href="#canonicalizing"&gt;&lt;span class="visuallyhidden"&gt;Canonicalizing permalink&lt;/span&gt;&lt;/a&gt;Canonicalizing&lt;/h3&gt;

&lt;p&gt;The first step determines the canonical URL for a stylesheet. Each stylesheet
has exactly one canonical URL that in turn refers to exactly one stylesheet. The
canonical URL must be absolute, including a scheme, but the specific structure
is up to the importer. In most cases, the stylesheet in question will exist on
disk and the importer will just return a &lt;code&gt;file:&lt;/code&gt; URL for it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;canonicalize()&lt;/code&gt; method takes a URL string that may be either relative or
absolute. If the importer recognizes that URL, it returns a corresponding
absolute URL (including a scheme). This is the &lt;em&gt;canonical URL&lt;/em&gt; for the
stylesheet in question. Although the input URL may omit a file extension or
an initial underscore, the canonical URL must be fully resolved.&lt;/p&gt;

&lt;p&gt;For a stylesheet that&amp;rsquo;s loaded from the filesystem, the canonical URL will be
the absolute &lt;code&gt;file:&lt;/code&gt; URL of the physical file on disk. If it&amp;rsquo;s generated
in-memory, the importer should choose a custom URL scheme to guarantee that
its canonical URLs don&amp;rsquo;t conflict with any other importer&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;For example, if you&amp;rsquo;re loading Sass files from a database, you might use the
scheme &lt;code&gt;db:&lt;/code&gt;. The canonical URL for a stylesheet associated with key &lt;code&gt;styles&lt;/code&gt;
in the database might be &lt;code&gt;db:styles&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This function also takes a &lt;code&gt;fromImport&lt;/code&gt; option that indicates whether the
importer is being invoked from an &lt;code&gt;@import&lt;/code&gt; rule (as opposed to &lt;code&gt;@use&lt;/code&gt;,
&lt;code&gt;@forward&lt;/code&gt;, or &lt;code&gt;meta.load-css()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Having a canonical URL for each stylesheet allows Sass to ensure that the
same stylesheet isn&amp;rsquo;t loaded multiple times in the new module system.&lt;/p&gt;

&lt;h4 id="canonicalizing-relative-loads"&gt;
&lt;a class="anchor" href="#canonicalizing-relative-loads"&gt;&lt;span class="visuallyhidden"&gt;Canonicalizing Relative Loads permalink&lt;/span&gt;&lt;/a&gt;Canonicalizing Relative Loads&lt;/h4&gt;

&lt;p&gt;When a stylesheet tries to load a relative URL, such as &lt;code&gt;@use &amp;quot;variables&amp;quot;&lt;/code&gt;, it&amp;rsquo;s
not clear from the document itself whether that refers to a file that exists
relative to the stylesheet or to another importer or load path. Here&amp;rsquo;s how the
importer API resolves that ambiguity:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, the relative URL is resolved relative to the canonical URL of the
stylesheet that contained the &lt;code&gt;@use&lt;/code&gt; (or &lt;code&gt;@forward&lt;/code&gt; or &lt;code&gt;@import&lt;/code&gt;). For
example, if the canonical URL is &lt;code&gt;file:///path/to/my/_styles.scss&lt;/code&gt;, then the
resolved URL will be &lt;code&gt;file:///path/to/my/variables&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This URL is then passed to the &lt;code&gt;canonicalize()&lt;/code&gt; method of the importer that
loaded the old stylesheet. (That means it&amp;rsquo;s important for your importers to
support absolute URLs!) If the importer recognizes it, it returns the
canonical value which is then passed to that importer&amp;rsquo;s &lt;code&gt;load()&lt;/code&gt;; otherwise,
it returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the old stylesheet&amp;rsquo;s importer didn&amp;rsquo;t recognize the URL, it&amp;rsquo;s passed to all
the &lt;code&gt;importers&lt;/code&gt;&amp;lsquo; canonicalize functions in the order they appear in &lt;code&gt;options&lt;/code&gt;,
then checked for in all the &lt;code&gt;loadPaths&lt;/code&gt;. If none of those recognizes it, the
load fails.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s important that local relative paths take precedence over other importers or
load paths, because otherwise your local stylesheets could get unexpectedly
broken by a dependency adding a file with a conflicting name.&lt;/p&gt;

&lt;h3 id="loading"&gt;
&lt;a class="anchor" href="#loading"&gt;&lt;span class="visuallyhidden"&gt;Loading permalink&lt;/span&gt;&lt;/a&gt;Loading&lt;/h3&gt;

&lt;p&gt;The second step actually loads the text of the stylesheet. The &lt;code&gt;load()&lt;/code&gt;
method takes a canonical URL that was returned by &lt;code&gt;canonicalize()&lt;/code&gt; and
returns the contents of the stylesheet at that URL. This is only called once
per compilation for each canonical URL; future loads of the same URL will
re-use either the existing module (for &lt;code&gt;@use&lt;/code&gt; and &lt;code&gt;@forward&lt;/code&gt;) or the parse
tree (for &lt;code&gt;@import&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;load()&lt;/code&gt; method returns an object with the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;css&lt;/code&gt;: The text of the loaded stylesheet.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;syntax&lt;/code&gt;: The syntax of the file: &lt;code&gt;&amp;#39;scss&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;indented&amp;#39;&lt;/code&gt;, or &lt;code&gt;&amp;#39;css&amp;#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourceMapUrl&lt;/code&gt;: An optional browser-accessible &lt;code&gt;URL&lt;/code&gt; to include in source maps
when referring to this file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="fileimporter"&gt;
&lt;a class="anchor" href="#fileimporter"&gt;&lt;span class="visuallyhidden"&gt;FileImporter permalink&lt;/span&gt;&lt;/a&gt;&lt;code&gt;FileImporter&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This proposal also adds a special type of importer known as a &lt;code&gt;FileImporter&lt;/code&gt;.
This importer makes the common case of redirecting loads to somewhere on the
physical filesystem easier. It doesn&amp;rsquo;t require the caller to implement
&lt;code&gt;load()&lt;/code&gt;, since that&amp;rsquo;s always going to be the same for files on disk.&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;FileImporter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;findFileUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;fromImport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FileImporterResult&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;findFileUrl()&lt;/code&gt; method takes a relative URL and returns an object with the
following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: The absolute &lt;code&gt;file:&lt;/code&gt; URL of the file to load. This URL doesn&amp;rsquo;t need to
be fully canonicalized: the Sass compiler will take care of resolving
partials, file extensions, index files, and so on.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sourceMapUrl&lt;/code&gt;: An optional browser-accessible &lt;code&gt;URL&lt;/code&gt; to include in source maps
when referring to this file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="functions"&gt;
&lt;a class="anchor" href="#functions"&gt;&lt;span class="visuallyhidden"&gt;Functions permalink&lt;/span&gt;&lt;/a&gt;Functions&lt;/h2&gt;

&lt;p&gt;The new function API&amp;rsquo;s function type is very similar to the old API&amp;rsquo;s:&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CustomFunctionCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only differences are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Async functions return a &lt;code&gt;Promise&amp;lt;Value&amp;gt;&lt;/code&gt; rather than calling a callback.&lt;/li&gt;
&lt;li&gt;The value types themselves are different.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second point is pretty substantial, though! The new value types are much
more fleshed out than the old versions. Let&amp;rsquo;s start with the parent class:&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Returns the values of `this` when interpreted as a list.
   *
   * - For a list, this returns its elements.
   * - For a map, this returns each of its key/value pairs as a `SassList`.
   * - For any other value, this returns a list that contains only that value.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;asList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Whether `this` is a bracketed Sass list. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;hasBrackets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Whether `this` is truthy (any value other than `null` or `false`). */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;isTruthy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Returns JS's null if this is `sassNull`, or `this` otherwise. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;realNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** If `this` is a list, return its separator. Otherwise, return `null`. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ListSeparator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Converts the Sass index `sassIndex` to a JS index into the array returned
   * by `asList`.
   *
   * Sass indices start counting at 1, and may be negative in order to index
   * from the end of the list.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;sassIndexToListIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sassIndex&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it's a `SassBoolean`, and throws an error otherwise.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of a parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertBoolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassBoolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it's a `SassColor`, and throws an error otherwise.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of a parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it's a `SassFunction`, and throws an error otherwise.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of the parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassFunction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it's a `SassMap` (or converts it to a `SassMap` if it's
   * an empty list), and throws an error otherwise.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of the parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it's a `SassNumber`, and throws an error otherwise.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of a parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it's a `SassString`, and throws an error otherwise.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of a parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns the value of `this` if it can be interpreted as a map.
   *
   * - If this is a map, returns its contents.
   * - If this is an empty list, returns an empty map.
   * - Otherwise, returns `null`.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;tryMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;OrderedMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Returns whether `this == other` in SassScript. */&lt;/span&gt;
  &lt;span class="nx"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;other&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a couple important things to note here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because CSS doesn&amp;rsquo;t have a strong syntactic differentiation between a single
element and a list containing one element, any Sass value may be treated as
though it&amp;rsquo;s a list. The &lt;code&gt;Value&lt;/code&gt; makes it easy to follow this convention by
making the &lt;code&gt;asList()&lt;/code&gt;, &lt;code&gt;hasBrackets()&lt;/code&gt;, and &lt;code&gt;separator()&lt;/code&gt; getters available
for every &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The list returned this was and the map returned by &lt;code&gt;asMap()&lt;/code&gt; are immutable
types from the &lt;a href="https://immutable-js.com/"&gt;&lt;code&gt;immutable&lt;/code&gt; package&lt;/a&gt;. This reflects Sass&amp;rsquo;s built-in
immutability of all its types. Although these values can&amp;rsquo;t be modified
directly, their APIs make it easy and efficient to create new values with
changes applied.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sass&amp;rsquo;s list-indexing conventions are different than JavaScript&amp;rsquo;s. The
&lt;code&gt;sassIndexToListIndex()&lt;/code&gt; function makes it easy to convert from Sass index to
JS index.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Sass, any value may be used in a boolean context, with &lt;code&gt;false&lt;/code&gt;
and &lt;code&gt;null&lt;/code&gt; counting as &amp;ldquo;falsey&amp;rdquo; values. The &lt;code&gt;isTruthy&lt;/code&gt; getter makes this
convention easy to follow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;assert*()&lt;/code&gt; functions make it easy to ensure that you&amp;rsquo;re being passed the
arguments you expect, and to throw an idiomatic error if you&amp;rsquo;re not. They&amp;rsquo;re
particularly useful for TypeScript users since they&amp;rsquo;ll automatically narrow
the type of the &lt;code&gt;Value&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most Sass values have their own subclasses, but there are three singleton values
that are just available as constants: &lt;code&gt;sassTrue&lt;/code&gt;, &lt;code&gt;sassFalse&lt;/code&gt;, and &lt;code&gt;sassNull&lt;/code&gt;
represent Sass&amp;rsquo;s &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt; values respectively.&lt;/p&gt;

&lt;h3 id="colors"&gt;
&lt;a class="anchor" href="#colors"&gt;&lt;span class="visuallyhidden"&gt;Colors permalink&lt;/span&gt;&lt;/a&gt;Colors&lt;/h3&gt;

&lt;p&gt;The new API&amp;rsquo;s &lt;code&gt;SassColor&lt;/code&gt; class provides access to colors in RGB, HSL, and HWB
format. As with built-in Sass color functions, any attribute can be accessed on
any color regardless of how it was initially created.&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** Creates an RGB color. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creates an HSL color. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;saturation&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;lightness&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creates an HWB color. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;hwb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;whiteness&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;blackness&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's red channel. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's green channel. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's blue channel. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's hue. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's saturation. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;saturation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's lightness. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;lightness&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's whiteness. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;whiteness&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's blackeness. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;blackness&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The color's alpha channel. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns a copy of `this` with the RGB channels updated to match `options`.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;changeRgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns a copy of `this` with the HSL values updated to match `options`.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;changeHsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;saturation&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;lightness&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns a copy of `this` with the HWB values updated to match `options`.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;changeHwb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;whiteness&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;blackness&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Returns a copy of `this` with `alpha` as its alpha channel. */&lt;/span&gt;
  &lt;span class="nx"&gt;changeAlpha&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassColor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="numbers"&gt;
&lt;a class="anchor" href="#numbers"&gt;&lt;span class="visuallyhidden"&gt;Numbers permalink&lt;/span&gt;&lt;/a&gt;Numbers&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;SassNumber&lt;/code&gt; class stores its numerator and denominator units as arrays
rather than strings. In addition, it provides methods for asserting that it has
specific units (&lt;code&gt;assertNoUnits()&lt;/code&gt;, &lt;code&gt;assertUnit()&lt;/code&gt;) and for converting it to
specific units (&lt;code&gt;convert()&lt;/code&gt;, &lt;code&gt;convertToMatch()&lt;/code&gt;, &lt;code&gt;convertValue()&lt;/code&gt;,
&lt;code&gt;convertValueToMatch()&lt;/code&gt;, &lt;code&gt;coerce()&lt;/code&gt;, &lt;code&gt;coerceValue()&lt;/code&gt;, &lt;code&gt;coerceValueToMatch()&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Sass&amp;rsquo;s numeric logic is also subtly different from JS, since Sass considers
numbers that differ by less than the 10th decimal digit to be identical. This
API provides a number of methods that help convert between this and JavaScript&amp;rsquo;s
numeric logic.&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** Creates a Sass number with no units or a single numerator unit. */&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creates a Sass number with multiple numerator and/or denominator units. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;withUnits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;numeratorUnits&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;denominatorUnits&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** This number's value. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Whether `value` is an integer according to Sass's numeric logic.
   *
   * The integer value can be accessed using `asInt`.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;isInt&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * If `value` is an integer according to Sass's numeric logic, returns the
   * corresponding JS integer, or `null` if `value` isn't an integer.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;asInt&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** This number's numerator units. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;numeratorUnits&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** This number's denominator units. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;denominatorUnits&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Whether `this` has numerator or denominator units. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;hasUnits&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * If `value` is an integer according to Sass's numeric logic, returns the
   * corresponding JS integer, or throws an error if `value` isn't an integer.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of the parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * If `value` is between `min` and `max` according to Sass's numeric logic,
   * returns it clamped to that range. Otherwise, throws an error.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of the parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertInRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it has no units. Otherwise, throws an error.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of a parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertNoUnits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Returns `this` if it has `unit` as its single (numerator) unit. Otherwise,
   * throws an error.
   *
   * The `name` parameter is used for error reporting. It should match the name
   * of a parameter passed to the custom function (without the `$`).
   */&lt;/span&gt;
  &lt;span class="nx"&gt;assertUnit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="na"&gt;stringunit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Returns whether `this` has the single numerator unit `unit`. */&lt;/span&gt;
  &lt;span class="nx"&gt;hasUnit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Returns whether this number's units are compatible with `unit`. */&lt;/span&gt;
  &lt;span class="nx"&gt;compatibleWithUnit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * If this number's units are compatible with `newNumerators` and
   * `newDenominators`, returns a new number with those units that's equal to
   * `this`. Otherwise, throws an error.
   *
   * Note that unitless numbers are only compatible with other unitless numbers.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;newNumerators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;newDenominators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * If this number's units are compatible with `other`'s, returns a new number
   * with `other`'s units that's equal to `this`. Otherwise, throws an error.
   *
   * Note that unitless numbers are only compatible with other unitless numbers.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;convertToMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Equivalent to `convert(newNumerators, newDenominators).value`. */&lt;/span&gt;
  &lt;span class="nx"&gt;convertValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;newNumerators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;newDenominators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Equivalent to `convertToMatch(other).value`. */&lt;/span&gt;
  &lt;span class="nx"&gt;convertValueToMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Like `convert()`, but if `this` is unitless returns a copy of it with the
   * same value and the given units.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;coerce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;newNumerators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;newDenominators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Like `convertToMatch()`, but if `this` is unitless returns a copy of it
   * with the same value and `other`'s units.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;coerceToMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Equivalent to `coerce(newNumerators, newDenominators).value`. */&lt;/span&gt;
  &lt;span class="nx"&gt;coerceValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="na"&gt;newNumerators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;newDenominators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Equivalent to `coerceToMatch(other).value`. */&lt;/span&gt;
  &lt;span class="nx"&gt;coerceValueToMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassNumber&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="strings"&gt;
&lt;a class="anchor" href="#strings"&gt;&lt;span class="visuallyhidden"&gt;Strings permalink&lt;/span&gt;&lt;/a&gt;Strings&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;SassString&lt;/code&gt; class provides access to information about whether or not the
string is quoted. As with lists, JS&amp;rsquo;s notion of indexes differs from Sass&amp;rsquo;s, so
it also provides the &lt;code&gt;sassIndexToStringIndex()&lt;/code&gt; method to convert a JS index
into a Sass index.&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SassString&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** Creates a string with the given `text`. */&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/** @default true */&lt;/span&gt;
      &lt;span class="na"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creates an empty string`. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/** @default true */&lt;/span&gt;
    &lt;span class="na"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nx"&gt;SassString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The contents of `this`. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Whether `this` has quotes. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;hasQuotes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** The number of Unicode code points in `text`. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;sassLength&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * Converts the Sass index `sassIndex` to a JS index into `text`.
   *
   * Sass indices start counting at 1, and may be negative in order to index
   * from the end of the list. In addition, Sass indexes strings by Unicode code
   * point, while JS indexes them by UTF-16 code unit.
   */&lt;/span&gt;
  &lt;span class="nx"&gt;sassIndexToStringIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;sassIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="lists"&gt;
&lt;a class="anchor" href="#lists"&gt;&lt;span class="visuallyhidden"&gt;Lists permalink&lt;/span&gt;&lt;/a&gt;Lists&lt;/h3&gt;

&lt;p&gt;As mentioned above, most list functions are on the &lt;code&gt;Value&lt;/code&gt; superclass to make it
easy to follow the Sass convention of treating all values as lists. However, the
&lt;code&gt;SassList&lt;/code&gt; class can still be constructed to make new lists:&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SassList&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** Creates a Sass list with the given `contents`. */&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="cm"&gt;/** @default ',' */&lt;/span&gt;
      &lt;span class="nx"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;ListSeparator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="cm"&gt;/** @default false */&lt;/span&gt;
      &lt;span class="nx"&gt;brackets&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creates an empty Sass list. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/** @default null */&lt;/span&gt;
    &lt;span class="nx"&gt;separator&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;ListSeparator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/** @default false */&lt;/span&gt;
    &lt;span class="nx"&gt;brackets&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nx"&gt;SassList&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="maps"&gt;
&lt;a class="anchor" href="#maps"&gt;&lt;span class="visuallyhidden"&gt;Maps permalink&lt;/span&gt;&lt;/a&gt;Maps&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;SassMap&lt;/code&gt; class simply exposes its contents as an &lt;code&gt;OrderedMap&lt;/code&gt; from the
&lt;a href="https://immutable-js.com/"&gt;&lt;code&gt;immutable&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SassMap&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/** Creates a Sass map with the given `contents`. */&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;OrderedMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="cm"&gt;/** Creates an empty Sass map. */&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SassMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cm"&gt;/** Returns this map's contents. */&lt;/span&gt;
  &lt;span class="nx"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;OrderedMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="functions"&gt;
&lt;a class="anchor" href="#functions"&gt;&lt;span class="visuallyhidden"&gt;Functions permalink&lt;/span&gt;&lt;/a&gt;Functions&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;SassFunction&lt;/code&gt; class is fairly restrictive: it just allows a new first-class
function to be created with a synchronous callback. These functions can&amp;rsquo;t be
invoked by custom functions—but they still provide more power than the old API!&lt;/p&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SassFunction&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Value&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/**
   * Creates a Sass function value with the given `signature` that calls
   * `callback` when it's invoked.
   */&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;signature&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CustomFunctionCallback&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="more-information"&gt;
&lt;a class="anchor" href="#more-information"&gt;&lt;span class="visuallyhidden"&gt;More Information permalink&lt;/span&gt;&lt;/a&gt;More Information&lt;/h2&gt;

&lt;p&gt;If you want to know more about these proposals and see their most up-to-date
forms, they&amp;rsquo;re available on GitHub to view in full:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sass/sass/tree/main/proposal/new-js-api.d.ts"&gt;Compile API proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sass/sass/blob/main/proposal/js-logger.d.ts"&gt;Logger proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sass/sass/blob/main/proposal/new-js-importer.d.ts"&gt;Importer proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sass/sass/blob/main/proposal/new-function-and-values-api.d.ts"&gt;Functions and values proposal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We&amp;rsquo;re eager for feedback, so please &lt;a href="https://github.com/sass/sass/issues/new"&gt;let us know what you think&lt;/a&gt;! The proposals
in question will be open for at least a month after this blog post goes live,
and possibly more depending on how lively the discussion around them is.&lt;/p&gt;
</content>
  </entry>
</feed>
